;; -*- coding: utf-8-unix -*-
;; Automatically written history of CIDER REPL session
;; Edit at your own risk

("(use :reload 'quil-test.core)" "(use 'quil-test.core)" "(use)" "(use 'quil-test.core)" "(use 'quil-test.core :reload-all true)" "(q/sketch)" "(setup)" "(core)" "(take 10 (fibonacci))" "(tester \"GG\")" "(tester)" "tester" "(take 5 (repeatedly (fn [] (rand))))" "(take 3 [1 2 3])" "(take 3 [1])" "(find-sum 1000)" "(find-sum 10)" "(is-multiple-of-3-or-5 4)" "(is-multiple-of-3-or-5 15)" "(mod 1 2)" "(rand 10)" "(hit asym-hobbit-body-parts)" "(better-symmetrize-body-parts asym-hobbit-body-parts)" "(reduce + (list 1 2 3 4))" "(into [] (set [:a :a :b]))" "(set :a :a)" "(into [] (set :a :a :b))" "(symmetrize-body-parts asym-hobbit-body-parts)" "(matching-part {:name \"head\" :size 1})" "(symmetrize-body-parts asym-hobbit-body-parts)" "(matching-part {:name \"left-eye\" :size 1})" "(symmetrize-body-parts asym-hobbit-body-parts)" "asym-hobbit-body-parts" "(#(* % 3) 3)" "#(* % 3)" "lambda" "(lambda (x) 2)" "lambda" "((fn [x] (* x 3)) 3)" "(clojure-version)" "(test-func 1 2)" "(test-func 1)" "(test-func)" "test-func" "(map inc [1 2 3 4])" "(map inc (list 1 2 3))" "ind" "inc" "(1)" "+2" "+" "(+ 1 2)" "(or + 1 2)" "(first #{2 1 3})" "(first #{1 2 3})" "(first [1 2 3])" "(first (list 1 2 3))" ":asdfg" ":second" "(get-in mymap [:second :name])" "(get-in mymap :second :name)" "mymap" "(mymap :first) " "mymap" "1/5" "1.2" "96" "koko" "(if (list) 2 3)" "(list)" "(if '() 2 3)" "(= true '())" "(= nil false)" "(equal?)" "'()" "(= nil '())" "(train)" "(-main)" "(+ 1 2)" "(train)" "(-main)" "(list* 1 2)" "(first (list 1 2 3))" "(first (1 2 3))" "(first [1 2 3])" "(+ 1 2)" "(quit)" "b" "(-main)" "(refresh)" "updae" "(update)" "(refresh)" "(-main)" "(setup)" "(+ 1 2)" "(-main)")